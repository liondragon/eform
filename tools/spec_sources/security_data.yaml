version: 1
$schema: https://schemas.eforms.dev/security-data-v1.json
cookie_policy_rows:
  - id: cookie-policy-hard
    policy_path: "hard"
    handling: "Reject with `EFORMS_ERR_TOKEN`. Return the structured result and abort before ledger reservation."
    token_ok: false
    soft_labels: []
    require_challenge: false
    identifier:
      kind: none
      text: "— (`submission_id=null`)"
    cookie_present: "Per request; true only when a syntactically valid cookie header was present on this POST."
    notes: ""
    references:
      - sec-cookie-policy-matrix
  - id: cookie-policy-soft
    policy_path: "soft"
    handling: "Continue via NCID; treat tampering separately; add `cookie_missing`."
    token_ok: false
    soft_labels:
      - cookie_missing
    require_challenge: false
    identifier:
      kind: ncid
      text: "NCID (`nc-…`, `is_ncid=true`)"
    cookie_present: "False when the cookie was absent/malformed; true when a syntactically valid cookie lacked a record."
    notes: ""
    references:
      - sec-cookie-policy-matrix
      - sec-ncid-rerender
  - id: cookie-policy-off
    policy_path: "off"
    handling: "Continue via NCID; do **not** add `cookie_missing` when the cookie was absent/malformed; add it when a syntactically valid cookie lacked a record."
    token_ok: false
    soft_labels: conditional
    require_challenge: false
    identifier:
      kind: ncid
      text: "NCID (`nc-…`, `is_ncid=true`)"
    cookie_present: "False when the cookie was absent/malformed; true when only the record was missing/expired."
    notes: ""
    references:
      - sec-cookie-policy-matrix
  - id: cookie-policy-challenge
    policy_path: "challenge"
    handling: "Continue via NCID; require verification before proceeding; add `cookie_missing`."
    token_ok: false
    soft_labels:
      - cookie_missing
    require_challenge: true
    identifier:
      kind: ncid
      text: "NCID (`nc-…`, `is_ncid=true`)"
    cookie_present: "False when the cookie was absent/malformed; true when a syntactically valid cookie lacked a record."
    notes: ""
    references:
      - sec-cookie-policy-matrix
      - sec-ncid-rerender

cookie_lifecycle_rows:
  - id: cookie-lifecycle-get-slotless
    flow_trigger: GET render (slots disabled)
    server_must: "MUST omit `eforms_slot`; embed `/eforms/prime?f={form_id}` pixel; reuse markup verbatim on rerender."
    identifier:
      kind: submission_id
      text: "`submission_id` rendered without slot suffix."
    notes: "Slotless deployments omit the `s` query parameter entirely."
    references:
      - sec-cookie-mode
      - sec-cookie-lifecycle-matrix
  - id: cookie-lifecycle-get-slotted
    flow_trigger: GET render (slots enabled)
    server_must: "When a slot is assigned, MUST emit deterministic `eforms_slot` and `/eforms/prime?f={form_id}&s={slot}`; slotless surplus renders omit `eforms_slot` and prime without `s`."
    identifier:
      kind: prime_record
      text: "Prime record — `/eforms/prime` unions the slot into `slots_allowed`."
    notes: "Deterministic assignment depends only on render-time inputs; clients cannot pick slots."
    references:
      - sec-cookie-mode
      - sec-cookie-lifecycle-matrix
  - id: cookie-lifecycle-prime
    flow_trigger: "`/eforms/prime` request"
    server_must: "MUST call `Security::mint_cookie_record()`; union `s` (when allowed) into `slots_allowed`; derive canonical `slot` when the union size is one; load the record before deciding on `Set-Cookie`; MUST skip the positive header when the request presented an identical, unexpired cookie (same Name/Value/Path/SameSite/Secure)."
    identifier:
      kind: cookie_record
      text: "Cookie record persists `{ mode:\"cookie\", form_id, eid, issued_at, expires, slots_allowed, slot }`."
    notes: "Missing/truncated/expired record **or a request lacking an unexpired match** ⇒ send `Set-Cookie`; otherwise MUST skip the header whenever that identical, unexpired cookie is present. Response: `204` + `Cache-Control: no-store`. Never rewrite TTLs on reuse. Status reports the pre-write lookup; returned `expires` reflects the persisted record after any remint."
    references:
      - sec-cookie-mode
      - sec-cookie-lifecycle-matrix
  - id: cookie-lifecycle-slots-disabled-global
    flow_trigger: Slots disabled globally
    server_must: "MUST reject any posted `eforms_slot`."
    identifier:
      kind: submission_id
      text: "`submission_id = eid`."
    notes: "Posted slot ⇒ HARD FAIL (`EFORMS_ERR_TOKEN`)."
    references:
      - sec-cookie-mode
      - sec-cookie-lifecycle-matrix
      - sec-security-invariants
  - id: cookie-lifecycle-post-slotless
    flow_trigger: POST from slotless render
    server_must: "MUST reject payloads containing `eforms_slot`."
    identifier:
      kind: submission_id
      text: "`submission_id = eid`."
    notes: "Slotless renders stay valid even if other instances later union slots into the record."
    references:
      - sec-cookie-lifecycle-matrix
      - sec-security-invariants
  - id: cookie-lifecycle-post-slotted
    flow_trigger: POST from slotted render
    server_must: "MUST require integer `eforms_slot` present in both `security.cookie_mode_slots_allowed` and the record’s `slots_allowed`; when `slot` is non-null, require equality; otherwise accept only enumerated values."
    identifier:
      kind: submission_id
      text: "`submission_id = eid__slot{posted_slot}`."
    notes: "Missing/mismatched slot ⇒ HARD FAIL (`EFORMS_ERR_TOKEN`)."
    references:
      - sec-cookie-lifecycle-matrix
      - sec-security-invariants
  - id: cookie-lifecycle-error-rerender
    flow_trigger: Error rerender after NCID fallback
    server_must: "MUST follow [NCID rerender rules (§7.1.4.2)](#sec-ncid-rerender)."
    identifier:
      kind: ncid
      text: "`submission_id` stays pinned to the NCID from that section."
    notes: "Applies when cookie policies fall back to NCID."
    references:
      - sec-ncid-rerender
      - sec-cookie-lifecycle-matrix
  - id: cookie-lifecycle-challenge-rerender
    flow_trigger: Challenge rerender (before verification)
    server_must: "MUST follow [NCID rerender rules (§7.1.4.2)](#sec-ncid-rerender)."
    identifier:
      kind: ncid
      text: "Same NCID; follow-up GET mints the replacement cookie defined there."
    notes: "Ensures verification runs with a cookie present while preserving NCID pinning."
    references:
      - sec-ncid-rerender
      - sec-cookie-lifecycle-matrix
  - id: cookie-lifecycle-challenge-success
    flow_trigger: Challenge success response
    server_must: "MUST follow [NCID rerender rules (§7.1.4.2)](#sec-ncid-rerender)."
    identifier:
      kind: ncid
      text: "Persisted record reused per that contract."
    notes: "Applies only to `cookie_missing_policy=\"challenge\"`."
    references:
      - sec-ncid-rerender
      - sec-cookie-lifecycle-matrix

slot_handling_summary_rows:
  - id: slot-helper-no-union
    text: "`Security::mint_cookie_record()` never unions slots."
  - id: prime-unions-slots
    text: "`/eforms/prime` performs `slots_allowed ∪ {s}` (when allowed), derives `slot` when `|slots_allowed| == 1`, and persists only those fields; it MUST NOT rewrite `issued_at`/`expires`."

prime_set_cookie_guidance_rows:
  - id: prime-set-cookie-attributes
    text: "Set-Cookie attributes (normative): When `/eforms/prime` sends `Set-Cookie`, it MUST set `eforms_eid_{form_id}` with:"
    children:
      - text: "`Path=/`"
      - text: "`Secure` when the request is HTTPS; omit otherwise"
      - text: "`HttpOnly=true`"
      - text: "`SameSite=Lax`"
      - text: "`Max-Age =`"
        children:
          - text: "`security.token_ttl_seconds` when minting a new record, or"
          - text: "`record.expires - now` when reissuing an existing record so the client countdown never exceeds the server record."
  - id: prime-remaining-lifetime
    text: "Definition — Remaining lifetime = `max(0, record.expires - now)` (seconds)."
  - id: prime-sends-set-cookie-definition
    text: "Definition: “sends `Set-Cookie`” refers to the positive header emitted under the carve-out below; deletion headers on rerender are governed by [NCID rerender lifecycle (§7.1.4.2)](#sec-ncid-rerender)."
  - id: prime-unexpired-match
    text: "Definition — **unexpired match**: the request presents `eforms_eid_{form_id}` matching the EID regex and a server record exists for that EID with `now < record.expires`. HTTP requests do not echo Path/SameSite/Secure, so equality is inferred from minting with the configured attributes."
  - id: prime-set-cookie-carve-out
    text: "Carve-out (normative): `/eforms/prime` MUST send `Set-Cookie` when minting a new record or when the request lacks an unexpired match. It MUST NOT emit a positive `Set-Cookie` when an unexpired match is present; the endpoint MUST skip the header whenever an identical, unexpired cookie (same Name, Value, Path, SameSite, Secure) was presented. No alternate positive header is permitted while that match exists."

lifecycle_quickstart_rows:
  - id: quickstart-render
    stage: "Render (GET)"
    overview: "Hidden mode embeds the payload from `Security::mint_hidden_record()` and cookie mode follows the GET rows in [Cookie-mode lifecycle (§7.1.3.3)](#sec-cookie-lifecycle-matrix) plus [Cookie header actions (§7.1.3.5)](#sec-cookie-header-actions) so `/eforms/prime` handles mint and refresh."
  - id: quickstart-persist
    stage: "Persist"
    overview: "Hidden tokens and cookie records reuse the shared storage rules in [Shared lifecycle and storage (§7.1.1)](#sec-shared-lifecycle); cookie mode persists via the `/eforms/prime` row in [Cookie-mode lifecycle (§7.1.3.3)](#sec-cookie-lifecycle-matrix)."
  - id: quickstart-post-gate
    stage: "POST → Security gate"
    overview: "`Security::token_validate()` centralizes cookie policy outcomes and NCID transitions per [Cookie policy outcomes (§7.1.3.2)](#sec-cookie-policy-matrix) and [Cookie/NCID reference (§7.1.4.3)](#sec-cookie-ncid-summary)."
  - id: quickstart-challenge
    stage: "Challenge (conditional)"
    overview: "Challenge and NCID rerenders track the rerender entries in [Cookie-mode lifecycle (§7.1.3.3)](#sec-cookie-lifecycle-matrix) and the generated [NCID rerender contract (§7.1.4.2)](#sec-ncid-rerender) for delete + re-prime behavior."
  - id: quickstart-normalize
    stage: "Normalize"
    overview: "Normalization precedes side effects and applies the pipelines documented in [Validation & Sanitization Pipeline (§8)](#sec-validation-pipeline), [Redirect Safety (§9)](#sec-redirect-safety), [Suspect Handling (§10)](#sec-suspect-handling), and [Throttling (§11)](#sec-throttling) so cookie and hidden submissions share consistent validation."
  - id: quickstart-ledger
    stage: "Ledger"
    overview: "Ledger reservation uses the submission ID chosen by `Security::token_validate()` and follows [Ledger reservation contract (§7.1.1)](#sec-ledger-contract) before any side effects."
  - id: quickstart-success
    stage: "Success"
    overview: "Success flows rely on [Success behavior (§13)](#sec-success) and the PRG-related header rules in [Cookie header actions (§7.1.3.5)](#sec-cookie-header-actions) for NCID/challenge continuations."

cookie_header_actions_rows:
  - id: cookie-header-get-render
    flow_trigger: GET render
    anchor: sec-cookie-header-get-render
    header_action: skip
    invariants: "Renderer MUST NOT emit `Set-Cookie`; embed `/eforms/prime?f={form_id}[&s={slot}]` so `/eforms/prime` alone mints or refreshes the cookie before POST."
    references:
      - sec-cookie-mode
  - id: cookie-header-prime
    flow_trigger: "`/eforms/prime` request"
    anchor: sec-cookie-header-prime
    header_action: positive
    invariants: "Only flow permitted to emit a positive `Set-Cookie` for `eforms_eid_{form_id}`; send it when minting or when no unexpired match was presented, and skip it when an identical unexpired cookie arrived."
    references:
      - sec-cookie-mode
  - id: cookie-header-post-rerender
    flow_trigger: POST rerender (NCID or challenge)
    anchor: sec-cookie-header-post-rerender
    header_action: deletion
    invariants: "Error rerenders that proceed via NCID/challenge MUST delete `eforms_eid_{form_id}` with a matching Max-Age=0 header and embed `/eforms/prime` on the follow-up GET; the rerender itself MUST NOT emit a positive header."
    references:
      - sec-ncid-rerender
  - id: cookie-header-challenge-success
    flow_trigger: Challenge verification success
    anchor: sec-cookie-header-challenge-success
    header_action: deletion
    invariants: "Verifier success response clears the cookie via deletion header and relies on the PRG redirect GET to embed `/eforms/prime`; NCID stays pinned per the rerender lifecycle."
    references:
      - sec-ncid-rerender
  - id: cookie-header-prg-redirect
    flow_trigger: PRG redirect (success handoff)
    anchor: sec-cookie-header-prg-redirect
    header_action: deletion
    invariants: "Success redirect for NCID/challenge flows MUST send the deletion header before issuing the 303 so the follow-up GET reprovisions the cookie; no positive header is permitted in PRG."
    references:
      - sec-success
      - sec-ncid-rerender

ncid_summary_rows:
  - id: ncid-summary-hidden-valid
    scenario: Valid hidden record
    identifier_outcome:
      kind: submission_id
      text: "`submission_id = token`."
    required_action: "Embed the helper’s `{token, instance_id, timestamp}` verbatim and reuse them on rerender."
    canonical_section:
      anchor: sec-hidden-mode
      label: Hidden-mode contract (§7.1.2)
  - id: ncid-summary-hidden-missing
    scenario: Hidden record missing/expired with optional token
    identifier_outcome:
      kind: ncid
      text: "`submission_id = nc-…` (`is_ncid=true`, `token_ok=false`, `soft_reasons += token_soft`)."
    required_action: "Continue via NCID and preserve hidden-mode metadata."
    canonical_section:
      anchor: sec-ncid-hidden
      label: Hidden-mode NCID fallback (§7.1.4)
  - id: ncid-summary-policy-hard
    scenario: Cookie policy `hard`
    identifier_outcome:
      kind: none
      text: "— (submission rejected)."
    required_action: "Fail with `EFORMS_ERR_TOKEN`; do not mint/retain NCIDs."
    canonical_section:
      anchor: sec-cookie-policy-matrix
      label: Cookie policy outcomes (§7.1.3.2)
  - id: ncid-summary-policy-soft
    scenario: Cookie policy `soft`
    identifier_outcome:
      kind: ncid
      text: "`submission_id = nc-…` (`is_ncid=true`)."
    required_action: "Continue without challenge; add `cookie_missing`."
    canonical_section:
      anchor: sec-cookie-policy-matrix
      label: Cookie policy outcomes (§7.1.3.2)
  - id: ncid-summary-policy-off
    scenario: Cookie policy `off`
    identifier_outcome:
      kind: ncid
      text: "`submission_id = nc-…` (`is_ncid=true`)."
    required_action: "Continue; add `cookie_missing` only when a syntactically valid cookie lacked a record."
    canonical_section:
      anchor: sec-cookie-policy-matrix
      label: Cookie policy outcomes (§7.1.3.2)
  - id: ncid-summary-policy-challenge
    scenario: Cookie policy `challenge`
    identifier_outcome:
      kind: ncid
      text: "`submission_id = nc-…` (`is_ncid=true`, `require_challenge=true`)."
    required_action: "Require verification before proceeding; follow [NCID rerender rules (§7.1.4.2)](#sec-ncid-rerender)."
    canonical_section:
      anchor: sec-cookie-policy-matrix
      label: Cookie policy outcomes (§7.1.3.2)
  - id: ncid-summary-challenge-rerender
    scenario: Challenge rerender after NCID fallback
    identifier_outcome:
      kind: submission_id
      text: "`submission_id = nc-…` (same value reused)."
    required_action: "Follow [NCID rerender rules (§7.1.4.2)](#sec-ncid-rerender)."
    canonical_section:
      anchor: sec-cookie-lifecycle-matrix
      label: Cookie-mode lifecycle (§7.1.3.3)
  - id: ncid-summary-challenge-success
    scenario: Challenge success response
    identifier_outcome:
      kind: submission_id
      text: "`submission_id = nc-…` (same value reused)."
    required_action: "Follow [NCID rerender rules (§7.1.4.2)](#sec-ncid-rerender)."
    canonical_section:
      anchor: sec-cookie-lifecycle-matrix
      label: Cookie-mode lifecycle (§7.1.3.3)
  - id: ncid-summary-success-handoff
    scenario: NCID success handoff (no acceptable cookie)
    identifier_outcome:
      kind: ncid
      text: "`submission_id = nc-…`."
    required_action: "Force Redirect-only PRG even when `success.mode=\"inline\"`; append `&eforms_submission={submission_id}` and send the NCID deletion header before the 303 (per [NCID rerender rules (§7.1.4.2)](#sec-ncid-rerender)); redirect to `success.redirect_url` when set, otherwise `/eforms/success-verify?eforms_submission={submission_id}` (endpoint MUST remain enabled); renderers lacking both MUST fail preflight with `EFORMS_ERR_SUCCESS_REDIRECT_REQUIRED_FOR_NCID`. See [Success Behavior (PRG) (§13)](#sec-success) for narrative bullets."
    canonical_section:
      anchor: sec-cookie-ncid-summary
      label: Cookie/NCID reference (§7.1.5)

ncid_rerender_steps:
  - id: ncid-rerender-delete-cookie
    title: Expire the minted cookie
    action: "MUST delete `eforms_eid_{form_id}` via a `Set-Cookie` header whose Name/Path/SameSite/Secure/HttpOnly attributes match the minted cookie and whose `Max-Age=0` (or `Expires` is in the past) whenever NCID fallback or challenge rerenders fire, including the PRG redirect on challenge success."
  - id: ncid-rerender-reprime
    title: Re-prime via `/eforms/prime`
    action: "MUST embed `/eforms/prime?f={form_id}[&s={slot}]` on those rerenders so the persisted record is reissued before the next POST; the rerender itself MUST NOT emit a positive `Set-Cookie`."
  - id: ncid-rerender-pinned-submission
    title: Keep the NCID-pinned `submission_id`
    action: "MUST continue using the existing NCID as `submission_id`; rerenders, verification templates, and challenge success responses MUST NOT mint or substitute another identifier mid-flow. This delete + re-prime cycle is an allowed carve-out and does not violate the “no rotation before success” rule."
  - id: ncid-rerender-challenge-verify
    title: Challenge verification handoff
    action: "Challenge verification success MUST emit only the deletion header and rely on the PRG follow-up GET (the redirect target) to embed `/eforms/prime` and restore cookie presence before the next POST; verifiers MUST NOT mint or refresh the cookie directly."
